#Mizu Firmware Application
#Prashan D. and Maruchi K.
#Innovative Design Product Tier

dim connected       # BLE connection status
dim advertising     # advertising status (0=off, 1=on)
dim result
dim channel
dim data_len
dim data_data
dim register_value
dim power_control_reg
dim cdc_write_value(2)
dim written
dim i

dim accel(6)

procedure spi_write_one_register(reg_address, reg_value)
	call hardware_io_port_write(1, $4, $0)
	call hardware_spi_transfer(0, 1, $0A)(result, channel, data_len, data_data)	
	call hardware_spi_transfer(0, 1, reg_address)(result, channel, data_len, data_data)
	call hardware_spi_transfer(0, 1, reg_value)(result, channel, data_len, data_data)
	call hardware_io_port_write(1, $4, $4)
end

# System start/boot listener
event system_boot(major,minor,patch,build,ll_version,protocol,hw)
	# Device is not connected yet
    connected = 0
	
    # initialize advertising status as ON (since we're about to turn it on)
    advertising = 1
	
    # Set advertisement interval to 20 to 30ms. Use all advertisement channels
    call gap_set_adv_parameters(32,48,7)
	
    # Start advertisement (generic discoverable, undirected connectable)
    call gap_set_mode(2,2)
   
    #IO Directions for port 1: 0b101101
    call hardware_io_port_config_direction(1, $2D)(result)
    call hardware_io_port_write(1, $1, $0)(result)
	
	#Enable interrupts on port 0, pin 6 and pin 7, rising edge
	call hardware_io_port_config_irq(0, $C0, 0)
    
    #Soft Timer Configuration
    # 5 second interval (xtal freq = 32768), handle=0, and repeating
    call hardware_set_soft_timer(32768,0,0) # 1 second interval
    #call hardware_set_soft_timer(98304,0,0) # 3 second interval
    #call hardware_set_soft_timer(163840,0,0) # 5 second interval
    #call hardware_set_soft_timer(1966080,0,0) # 60 second interval
    #call hardware_set_soft_timer(7372800,0,0) # 225 second (3.75 min) interval
    
    # SPI Configuration: Channel, Polarity, Phase, Bit Order, BaudE, BaudM
    call hardware_spi_config(0, 1, 1, 1, 11, 216)
	call hardware_io_port_write(1, $2C, $4)
    
    #soft reset for accelerometer
    call spi_write_one_register($1F, $52)
	
	#LED On: Beginning setup for accelerometer
	call hardware_io_port_write(1, $1, $1)
	
	#.5ms dump
	i = 0
	while i < 200
		i = i + 1
	end while
	
	#Set activity threshold to 0xFA (250mg)
	call spi_write_one_register($20, $FA)
	call spi_write_one_register($21, $00)
	
	#Set inactivity threshold to 0x96 (150mg)
	call spi_write_one_register($23, $96)
	call spi_write_one_register($24, $00)
	
	#Set inactive timer to 0x1E (30) samples
	call spi_write_one_register($25, $1E)
	call spi_write_one_register($27, $3F)
	
	#Map the AWAKE bit to INT2
	call spi_write_one_register($2B, $40)
	
	#Map the INAWAKE bit to INT1
	call spi_write_one_register($2A, $20)
	
	#read power control register
	call hardware_io_port_write(1, $4, $0)
	call hardware_spi_transfer(0, 1, $0B)(result, channel, data_len, data_data)	
	call hardware_spi_transfer(0, 1, $2D)(result, channel, data_len, data_data)	
	call hardware_spi_transfer(0, 1, $00)(result, channel, data_len, data_data)	
	call hardware_io_port_write(1, $4, $4)

	power_control_reg = data_data
	#write to enable wakeup mode
	call spi_write_one_register($2D, (power_control_reg | $0A))
	#write to enable measurement mode
	#call spi_write_one_register($2D, (power_control_reg | $02))
		
	#10ms dump... (NEED THIS FOR ACCELEROMETER)
	call hardware_spi_transfer(0, 1, $00)(result, channel, data_len, data_data)
	call attributes_write(xgatt_control, 0, 1, data_data)
	
	##### CDC initialization stuffs #####

	call hardware_i2c_write($90, 1, 1, $BF)(written) #reset command
	
	i = 0
	while i < 10000
		i = i + 1
	end while
	
	#call hardware_i2c_write($90, 0, 1, $00)(written)
	#call hardware_i2c_read($90, 1, 1)(result, data_len, data_data)
	#call attributes_write(xgatt_control, 0, 1, data_data)
	
	cdc_write_value(0) = $07 #Cap Setup reg address
	cdc_write_value(1) = $80 #Setup Cap for continuous mode
	call hardware_i2c_write($90, 1, 2, cdc_write_value(0:2))(written)

	cdc_write_value(0) = $09 #EXC reg address
	cdc_write_value(1) = $08 #Set EXC A
	call hardware_i2c_write($90, 1, 2, cdc_write_value(0:2))(written)
	
	cdc_write_value(0) = $0B #CAPDAC A reg address
	cdc_write_value(1) = $FF #Set full input range
	call hardware_i2c_write($90, 1, 2, cdc_write_value(0:2))(written)

	cdc_write_value(0) = $0A #Config reg address
	cdc_write_value(1) = $01 | (2 << 3) #Continuous mode 
	call hardware_i2c_write($90, 1, 2, cdc_write_value(0:2))(written)
	
	#Led OFF: Finished Setup
	call hardware_io_port_write(1, $1, $0)
end

# Connection event listener
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
   # Device is connected.
   connected = 1
end

# Disconnection event
event connection_disconnected(handle, res)
   #connection disconnected, continue advertising
   connected = 0
   call hardware_io_port_write(1, $1, $0)(result)
   call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
end

# Handle client interaction w/ device (triggered by client writing to GATT)
event attributes_value(connection, reason, handle, offset, value_length, value_data)
end

# Handle timer callbacks
event hardware_soft_timer(handle)
	#Let accelerometer know it's being talked to
	call hardware_io_port_write(1, $5, $1)

	#Read instruction and begin at X register
	call hardware_spi_transfer(0, 1, $0B)(result, channel, data_len, data_data)	
	call hardware_spi_transfer(0, 1, $0E)(result, channel, data_len, data_data)
	
	#X, Y, Z data
	call hardware_spi_transfer(0, 1, $00)(result, channel, data_len, data_data)
	accel(0) = data_data
	call hardware_spi_transfer(0, 1, $00)(result, channel, data_len, data_data)
	accel(1) = data_data
	call hardware_spi_transfer(0, 1, $00)(result, channel, data_len, data_data)
	accel(2) = data_data
	call hardware_spi_transfer(0, 1, $00)(result, channel, data_len, data_data)
	accel(3) = data_data
	call hardware_spi_transfer(0, 1, $00)(result, channel, data_len, data_data)
	accel(4) = data_data
	call hardware_spi_transfer(0, 1, $00)(result, channel, data_len, data_data)
	accel(5) = data_data
		
	#Stop talking to the accelerometer
	call hardware_io_port_write(1, $5, $4)

	#Write acceleration to characteristic
	call attributes_write(xgatt_accel, 0, 6, accel(0:6))
	
	#write to CDC and move address pointer to 0x01 (the first data reg)
	call hardware_i2c_write($90, 0, 1, $0B)(written)
	#read the three data registers
	call hardware_i2c_read($90, 1, 3)(result, data_len, data_data)
	call attributes_write(xgatt_cap, 0, data_len, data_data)

end

event hardware_io_port_status(delta, port, irq, state)
	if port = 0 then
		if (irq & $40) = $40 then
			#ACTIVE
			call attributes_write(xgatt_int, 0, 1, $1)
		end if
		
		if (irq & $80) = $80 then
			#INACTIVE
			call attributes_write(xgatt_int, 0, 1, $2)
		end if
	end if
end

